[alias]
	##################
	   # Not Used#
	##################
	# View the SHA, description, and history graph of the latest 20 commits
	ls = log --pretty=oneline -n 20 --graph
	# View the current working tree status using the short format
	st = status -s
	# Show the diff between the latest commit and the current state
	# d = !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"
	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	# di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
	# Pull in remote changes for the current repository and all its submodules
	# p = !"git pull; git submodule foreach git pull origin master"
	# Credit an author on the latest commit
	# credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	##################
		# In Use#
	##################
	# Commit all changes
	ca = !git add --all && git commit -av
	# Commit all and amend to last commit
	caa = commit --all --amend -C HEAD
	# commit staged and amend to last commit 
	csa = commit --amend -C HEAD
	# commit with fixup
	caf = commit --all --fixup HEAD
	# Checkout
	co = checkout
	# Switch to a branch, creating it if necessary
	go = checkout -B
	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v
	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"
	# Stash PR
	pr-stash = !sh -c 'stash pull-request $0'
	# force push
	fp = push --force
	# rebase interactive
	rbi = "!rbi() { git rebase --interactive ${1:-develop}; }; rbi"
	# silently fixup all work in progress commits against develop or passed in branch
	rba = "!rba() { EDITOR=: git rebase --interactive --autosquash ${1:-develop}; }; rba"
	# clean up feature/fix/etc branches that have been merged to develop (or another specified branch)
	bcl = "!bcl() { git branch --merged ${1:-} | grep ${2:-'fix\\|test\\|feat\\|refact\\|doc\\|style\\|chore\\|pull'} | xargs -n 1 git branch -d ; }; bcl"
	bcla = "!bcla() { git branch ${1:-} | grep ${2:-'fix\\|test\\|feat\\|refact\\|doc\\|style\\|chore\\|pull'} | xargs -n 1 git branch -D; }; bcla"

	# commit all changes as "wip" or passed in commit message
	wip = "!wip() { git commit --all -m \"${1:-wip}\";};wip"

	rh = reset --hard
	# usage: git rip | git rip master | git rip origin master
	rip = "!rip() { if [ $# -eq 1 ] ; then b=$1 ; else r=$1; b=$2; fi; git reset --hard ${r:-upstream}/${b:-develop};};rip"

	# lines of code since a tag (or since the beginning of time)
	#loc = "!loc() { git log --numstat --pretty=\"%H\" ${1:-} ${1:-} | awk 'NF==3 {plus+=\$1; minus+=\$2} END {printf(\"+%d, -%d\n\", plus, minus)}'; }; loc"

[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix

[core]
	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes
	# Treat spaces before tabs, lines that are indented with 8 or more spaces, and all kinds of trailing whitespace as an error
	whitespace = space-before-tab,indent-with-non-tab,trailing-space
	autocrlf = input
	# editor = subl -a --wait
	mergeoptions = --no-edit

[color]
	# Use colors in Git commands that are capable of colored output when outputting to the terminal
	ui = auto
[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
[color "status"]
	added = yellow
	changed = green
	untracked = cyan
[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true
	tool = p4mergetool

# Use `origin` as the default remote on the `master` branch in all cases
[branch "master"]
	remote = origin
	merge = refs/heads/master

# URL shorthands
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
	insteadOf = "github:"
[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
	insteadOf = "gist:"
[url "https://github.com"]
	insteadOf = git://github.com

[push]
	default = simple
[user]
	name = Jason Miller
	email = jason@millerjb.com
[diff]
	tool = p4mergetool
[difftool "diffmerge"]
	cmd = diffmerge \"$LOCAL\" \"$REMOTE\"
[difftool "p4mergetool"]
	cmd = /Applications/p4merge.app/Contents/Resources/launchp4merge $LOCAL $REMOTE\n
	trustExitCode = true
[mergetool]
	keepBackup = false
[mergetool "diffmerge"]
	cmd = "diffmerge --merge --result=\"$MERGED\" \"$LOCAL\" \"$(if test -f \"$BASE\"; then echo \"$BASE\"; else echo \"$LOCAL\"; fi)\" \"$REMOTE\""
[mergetool "p4mergetool"]
	cmd = /Applications/p4merge.app/Contents/Resources/launchp4merge $PWD/$BASE $PWD/$REMOTE $PWD/$LOCAL $PWD/$MERGED
	trustExitCode = false
[credential]
	helper = osxkeychain
[rebase]
	autosquash = true
[rerere]
	enabled = true
